<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.Components.Validator</name>
    </assembly>
    <members>
        <member name="T:Castle.Components.Validator.ValidateEmailAttribute">
            <summary>
            Validate that this email address is a valid one.
            </summary>
            <remarks>
            This only check the format of the email, not if it really exists.
            </remarks>
        </member>
        <member name="T:Castle.Components.Validator.AbstractValidationAttribute">
            <summary>
            The base class for all the validation attributes.
            This class define a <seealso cref="N:Castle.Components.Validator"/> property that is used to retrieve the validtor that is used to 
            validate the value of the property.
            </summary>
        </member>
        <member name="T:Castle.Components.Validator.IValidatorBuilder">
            <summary>
            Constructs an <see cref="T:Castle.Components.Validator.IValidator"/> implementation.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.IValidatorBuilder.Build">
            <summary>
            Builds this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidationAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.AbstractValidationAttribute"/> class.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.AbstractValidationAttribute"/> class.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidationAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator"/>
            instance based on the properties set on the attribute instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidationAttribute.ConfigureValidatorMessage(Castle.Components.Validator.IValidator)">
            <summary>
            Applies the common configuration defined on the attribute.
            </summary>
            <param name="validator">The validator instance.</param>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidationAttribute.RunWhen">
            <summary>
            Defines when to run the validation. 
            Defaults to <c>RunWhen.Everytime</c>
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidationAttribute.ExecutionOrder">
            <summary>
            Gets or sets the validation execution order.
            </summary>
            <value>The execution order.</value>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidationAttribute.FriendlyName">
            <summary>
            Gets or sets the a friendly name for the target property
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidationAttribute.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="M:Castle.Components.Validator.ValidateEmailAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateEmailAttribute"/> class.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateEmailAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateEmailAttribute"/> class.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateEmailAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator"/>
            instance based on the properties set on the attribute instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateLengthAttribute">
            <summary>
            Validate that this property has the required length (either exact or in a range)
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateLengthAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new exact length validator.
            </summary>
            <param name="exactLength">The exact length required.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateLengthAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new exact length validator.
            </summary>
            <param name="exactLength">The exact length required.</param>
            <param name="errorMessage">The error message to be displayed if the validation fails.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateLengthAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new range based length validator.
            </summary>
            <param name="minLength">The minimum length, or <c>int.MinValue</c> if this should not be tested.</param>
            <param name="maxLength">The maximum length, or <c>int.MaxValue</c> if this should not be tested.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateLengthAttribute.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new range based length validator.
            </summary>
            <param name="minLength">The minimum length, or <c>int.MinValue</c> if this should not be tested.</param>
            <param name="maxLength">The maximum length, or <c>int.MaxValue</c> if this should not be tested.</param>
            <param name="errorMessage">The error message to be displayed if the validation fails.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateLengthAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator"/>
            instance based on the properties set on the attribute instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateRegExpAttribute">
            <summary>
            Validate that the property match the given regular expression
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateRegExpAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateRegExpAttribute"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateRegExpAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateRegExpAttribute"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateRegExpAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator"/>
            instance based on the properties set on the attribute instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidateSameAsAttribute">
            <summary>
            Validates that the content has the same 
            value as the property informed.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateSameAsAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateSameAsAttribute"/> class.
            </summary>
            <param name="propertyToCompare">The property to compare.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateSameAsAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateSameAsAttribute"/> class.
            </summary>
            <param name="propertyToCompare">The property to compare.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateSameAsAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator"/>
            instance based on the properties set on the attribute instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Castle.Components.Validator.ErrorSummary">
            <summary>
            Represents a validation report for an object instance
            which is a snapshot since the last validation check.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ErrorSummary.GetErrorsForProperty(System.String)">
            <summary>
            Gets the errors for a property.
            </summary>
            <param name="name">The property name.</param>
            <returns>Array of error messages</returns>
        </member>
        <member name="M:Castle.Components.Validator.ErrorSummary.RegisterErrorMessage(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Registers the error message per <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <param name="property">The property.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ErrorSummary.RegisterErrorMessage(System.String,System.String)">
            <summary>
            Registers the error message per <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <param name="property">The property.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Castle.Components.Validator.ErrorSummary.ErrorsCount">
            <summary>
            Gets the total of validation errors since the last validation check.
            <para>
            That includes all errors for all properties.
            </para>
            </summary>
            <value>The error count.</value>
        </member>
        <member name="P:Castle.Components.Validator.ErrorSummary.InvalidPropertiesCount">
            <summary>
            Gets the total of properties that have failed validation checks.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.ErrorSummary.InvalidProperties">
            <summary>
            Gets the invalid properties' name.
            </summary>
            <value>The invalid properties.</value>
        </member>
        <member name="P:Castle.Components.Validator.ErrorSummary.ErrorMessages">
            <summary>
            Gets the error messages.
            </summary>
            <value>The error messages.</value>
        </member>
        <member name="T:Castle.Components.Validator.InputElementType">
            <summary>
            Defines an html element type
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.InputElementType.Undefined">
            <summary>
            Nothing specified
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.InputElementType.Text">
            <summary>
            Text input element
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.InputElementType.Select">
            <summary>
            Select element
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.InputElementType.Radio">
            <summary>
            Radio element
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.InputElementType.Checkbox">
            <summary>
            Checkbox element
            </summary>
        </member>
        <member name="T:Castle.Components.Validator.IValidatorRegistry">
            <summary>
            Abstracts a validation registry per <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.IValidatorRegistry.GetValidators(System.Type,Castle.Components.Validator.RunWhen)">
            <summary>
            Gets all validators associated with a <see cref="T:System.Type"/>. 
            <para>
            The validators returned are initialized.
            </para>
            </summary>
            <param name="runWhen">Restrict the set returned to the phase specified</param>
            <param name="targetType">Target type.</param>
            <returns>A Validator array</returns>
        </member>
        <member name="M:Castle.Components.Validator.IValidatorRegistry.GetValidators(System.Type,System.Reflection.PropertyInfo,Castle.Components.Validator.RunWhen)">
            <summary>
            Gets all validators associated with a property. 
            <para>
            The validators returned are initialized.
            </para>
            </summary>
            <param name="targetType">Target type.</param>
            <param name="property">The property.</param>
            <param name="runWhen">Restrict the set returned to the phase specified</param>
            <returns>A Validator array</returns>
        </member>
        <member name="T:Castle.Components.Validator.IWebValidationGenerator">
            <summary>
            Abstracts an JS validation library implementation. 
            Each implementation should map the calls to their 
            own approach to enforce validation.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.IWebValidationGenerator.SetDigitsOnly(System.String)">
            <summary>
            Sets the digits only.
            </summary>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IWebValidationGenerator.SetNumberOnly(System.String)">
            <summary>
            Sets the number only.
            </summary>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IWebValidationGenerator.SetAsRequired(System.String)">
            <summary>
            Sets as required.
            </summary>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IWebValidationGenerator.SetRegExp(System.String,System.String)">
            <summary>
            Sets the reg exp.
            </summary>
            <param name="regExp">The reg exp.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IWebValidationGenerator.SetEmail(System.String)">
            <summary>
            Sets the email.
            </summary>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.Components.Validator.IWebValidationGenerator.SetExactLength(System.Int32)">
            <summary>
            Sets the length of the exact.
            </summary>
            <param name="length">The length.</param>
        </member>
        <member name="M:Castle.Components.Validator.IWebValidationGenerator.SetMinLength(System.Int32)">
            <summary>
            Sets the length of the min.
            </summary>
            <param name="minLength">Length of the min.</param>
        </member>
        <member name="M:Castle.Components.Validator.IWebValidationGenerator.SetMaxLength(System.Int32)">
            <summary>
            Sets the length of the max.
            </summary>
            <param name="maxLength">Length of the max.</param>
        </member>
        <member name="M:Castle.Components.Validator.IWebValidationGenerator.SetLengthRange(System.Int32,System.Int32)">
            <summary>
            Sets the length range.
            </summary>
            <param name="minLength">Length of the min.</param>
            <param name="maxLength">Length of the max.</param>
        </member>
        <member name="T:Castle.Components.Validator.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.date_invalid">
            <summary>
              Looks up a localized string similar to Please enter a valid date.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.decimal_invalid">
            <summary>
              Looks up a localized string similar to Please enter a valid decimal in this field.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.double_invalid">
            <summary>
              Looks up a localized string similar to Please enter a valid double in this field.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.email">
            <summary>
              Looks up a localized string similar to Please enter a valid email address. For example fred@domain.com.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.exactlength">
            <summary>
              Looks up a localized string similar to Field must be {0} characters long.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.generic_invalid">
            <summary>
              Looks up a localized string similar to Field has an invalid content.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.integer_invalid">
            <summary>
              Looks up a localized string similar to Please enter a valid integer in this field.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.isrequired">
            <summary>
              Looks up a localized string similar to This is a required field.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.length_invalidrange">
            <summary>
              Looks up a localized string similar to Field must be between {0} and {1} characters long.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.length_toolong">
            <summary>
              Looks up a localized string similar to Field must be less than {0} characters long.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.length_tooshort">
            <summary>
              Looks up a localized string similar to Field must be more than {0} characters long.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.same_as_invalid">
            <summary>
              Looks up a localized string similar to Fields do not match.
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.single_invalid">
            <summary>
              Looks up a localized string similar to Field value is invalid (not a valid single).
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.Messages.time_invalid">
            <summary>
              Looks up a localized string similar to Field value is invalid (not a valid time).
            </summary>
        </member>
        <member name="T:Castle.Components.Validator.CachedValidationRegistry">
            <summary>
            <see cref="T:Castle.Components.Validator.IValidatorRegistry"/> implementation that
            caches the reflection and custom attributes calls for better performance.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.CachedValidationRegistry.GetValidators(System.Type,Castle.Components.Validator.RunWhen)">
            <summary>
            Gets all validators associated with a <see cref="T:System.Type"/>.
            <para>
            The validators returned are initialized.
            </para>
            </summary>
            <param name="targetType">Target type.</param>
            <param name="runWhen">Restrict the set returned to the phase specified</param>
            <returns>A Validator array</returns>
        </member>
        <member name="M:Castle.Components.Validator.CachedValidationRegistry.GetValidators(System.Type,System.Reflection.PropertyInfo,Castle.Components.Validator.RunWhen)">
            <summary>
            Gets all validators associated with a property.
            <para>
            The validators returned are initialized.
            </para>
            </summary>
            <param name="targetType">Target type.</param>
            <param name="property">The property.</param>
            <param name="runWhen">Restrict the set returned to the phase specified</param>
            <returns>A Validator array</returns>
        </member>
        <member name="T:Castle.Components.Validator.ValidationException">
            <summary>
            This exception is raised when a validation error occurs
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidationException.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="errorMessages">The error messages.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidationException.#ctor(System.String,System.Exception,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
            <param name="errorMessages">The error messages.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="M:Castle.Components.Validator.ValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference (Nothing in Visual Basic). </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/></PermissionSet>
        </member>
        <member name="P:Castle.Components.Validator.ValidationException.ValidationErrorMessages">
            <summary>
            Returns a list of current validation errors messages, if available.
            </summary>
        </member>
        <member name="T:Castle.Components.Validator.ValidationInternalError">
            <summary>
            Exception used when something goes wrong on 
            validation internal inner workings.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidationInternalError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidationInternalError"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidationInternalError.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidationInternalError"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidationInternalError.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidationInternalError"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Castle.Components.Validator.ValidatorRunner">
            <summary>
            Coordinates the gathering and execution of validators.
            <seealso cref="T:Castle.Components.Validator.IValidatorRegistry"/>
            </summary>
            <example>
            ValidatorRunner runner = new ValidatorRunner(new CachedValidationRegistry());
            
            if (!runner.IsValid(customer))
            {
            	// do something as the Customer instance is not valid
            }
            </example>
        </member>
        <member name="M:Castle.Components.Validator.ValidatorRunner.#ctor(Castle.Components.Validator.IValidatorRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidatorRunner"/> class.
            </summary>
            <param name="registry">The instance registry.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidatorRunner.#ctor(System.Boolean,Castle.Components.Validator.IValidatorRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidatorRunner"/> class.
            </summary>
            <param name="inferValidators">if <c>true</c>, the runner will try 
            to infer un-declared validators based on property types</param>
            <param name="registry">The registry.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidatorRunner.IsValid(System.Object)">
            <summary>
            Determines whether the specified instance is valid.
            <para>
            All validators are run.
            </para>
            </summary>
            <param name="objectInstance">The object instance to be validated (cannot be null).</param>
            <returns>
            	<see langword="true"/> if the specified obj is valid; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.ValidatorRunner.IsValid(System.Object,Castle.Components.Validator.RunWhen)">
            <summary>
            Determines whether the specified instance is valid.
            <para>
            All validators are run for the specified <see cref="T:Castle.Components.Validator.RunWhen"/> phase.
            </para>
            </summary>
            <param name="objectInstance">The object instance to be validated (cannot be null).</param>
            <param name="runWhen">Restrict the set returned to the phase specified</param>
            <returns>
            <see langword="true"/> if the specified instance is valid; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.ValidatorRunner.GetValidators(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Gets the registered validators.
            </summary>
            <param name="parentType">Type of the parent.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Components.Validator.ValidatorRunner.GetValidators(System.Type,System.Reflection.PropertyInfo,Castle.Components.Validator.RunWhen)">
            <summary>
            Gets the registered validators.
            </summary>
            <param name="parentType">Type of the parent.</param>
            <param name="property">The property.</param>
            <param name="runWhenPhase">The run when phase.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Components.Validator.ValidatorRunner.HasErrors(System.Object)">
            <summary>
            Gets the error list per instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Components.Validator.ValidatorRunner.GetErrorSummary(System.Object)">
            <summary>
            Gets the error list per instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:Castle.Components.Validator.AbstractValidator">
            <summary>
            Abstract <see cref="T:Castle.Components.Validator.IValidator"/> implementation
            </summary>
        </member>
        <member name="T:Castle.Components.Validator.IValidator">
            <summary>
            Defines the basic contract for validators. 
            <para>
            To create a new validation you should use <see cref="T:Castle.Components.Validator.AbstractValidator"/> as it 
            implements most of the common methods and properties.
            </para>
            <para>
            The validation should happen at <c>IsValid</c>, and if the validator can configure
            a client-side validation script, it should use the <see cref="P:Castle.Components.Validator.IValidator.SupportsWebValidation"/>
            to indicate that it does support client-side validation and also implement the 
            <see cref="M:Castle.Components.Validator.IValidator.ApplyWebValidation(Castle.Components.Validator.WebValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IWebValidationGenerator,System.Collections.IDictionary)"/> to configure it.
            </para>
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.IValidator.Initialize(System.Reflection.PropertyInfo)">
            <summary>
            Implementors should perform any initialization logic
            </summary>
            <param name="property">The target property</param>
        </member>
        <member name="M:Castle.Components.Validator.IValidator.IsValid(System.Object)">
            <summary>
            Implementors should perform the actual validation upon
            the property value
            </summary>
            <param name="instance"></param>
            <returns><c>true</c> if the field is OK</returns>
        </member>
        <member name="M:Castle.Components.Validator.IValidator.IsValid(System.Object,System.Object)">
            <summary>
            Implementors should perform the actual validation upon
            the property value
            </summary>
            <param name="instance"></param>
            <param name="fieldValue"></param>
            <returns><c>true</c> if the field is OK</returns>
        </member>
        <member name="M:Castle.Components.Validator.IValidator.ApplyWebValidation(Castle.Components.Validator.WebValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IWebValidationGenerator,System.Collections.IDictionary)">
            <summary>
            Applies the web validation by setting up one or 
            more input rules on <see cref="T:Castle.Components.Validator.IWebValidationGenerator"/>.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="P:Castle.Components.Validator.IValidator.Property">
            <summary>
            The target property
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.IValidator.RunWhen">
            <summary>
            Defines when to run the validation. 
            Defaults to <c>RunWhen.Everytime</c>
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.IValidator.ExecutionOrder">
            <summary>
            Gets or sets the validation execution order.
            </summary>
            <value>The execution order.</value>
        </member>
        <member name="P:Castle.Components.Validator.IValidator.ErrorMessage">
            <summary>
            The error message to be displayed if the validation fails
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:Castle.Components.Validator.IValidator.FriendlyName">
            <summary>
            Gets or sets the a friendly name for the target property
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Castle.Components.Validator.IValidator.SupportsWebValidation">
            <summary>
            Gets a value indicating whether this validator supports web validation.
            </summary>
            <value>
            <see langword="true"/> if web validation is supported; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.IValidator.Name">
            <summary>
            Gets the property name. The <see cref="P:Castle.Components.Validator.IValidator.FriendlyName"/>
            is returned if non-null, otherwise it will return the property name.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidator.#cctor">
            <summary>
            Initializes the <see cref="T:Castle.Components.Validator.AbstractValidator"/> class.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidator.Initialize(System.Reflection.PropertyInfo)">
            <summary>
            Implementors should perform any initialization logic
            </summary>
            <param name="property">The target property</param>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidator.GetFieldOrPropertyValue(System.Object,System.String)">
            <summary>
            Obtains the value of a property or field on a specific instance.
            </summary>
            <param name="instance">The instance to inspect.</param>
            <param name="fieldOrPropertyName">The name of the field or property to inspect.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidator.ApplyWebValidation(Castle.Components.Validator.WebValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IWebValidationGenerator,System.Collections.IDictionary)">
            <summary>
            Applies the web validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IWebValidationGenerator"/>.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidator.IsValid(System.Object)">
            <summary>
            Implementors should perform the actual validation upon
            the property value
            </summary>
            <param name="instance">The target type instance</param>
            <returns><c>true</c> if the field is OK</returns>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidator.IsValid(System.Object,System.Object)">
            <summary>
            Implementors should perform the actual validation upon
            the property value
            </summary>
            <param name="instance">The target type instance</param>
            <param name="fieldValue">The property/field value. It can be null.</param>
            <returns><c>true</c> if the value is accepted (has passed the validation test)</returns>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidator.BuildErrorMessage">
            <summary>
            Builds the error message.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.AbstractValidator.GetResourceForCurrentCulture">
            <summary>
            Returns the resource set instance with the validation error messages.
            <seealso cref="T:Castle.Components.Validator.MessageConstants"/>
            </summary>
            <returns>A resource set instance</returns>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidator.ExecutionOrder">
            <summary>
            Gets or sets the validation execution order.
            </summary>
            <value>The execution order.</value>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidator.RunWhen">
            <summary>
            Defines when to run the validation. 
            Defaults to <c>RunWhen.Everytime</c>
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidator.Property">
            <summary>
            The target property
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidator.ErrorMessage">
            <summary>
            The error message to be displayed if the validation fails
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidator.FriendlyName">
            <summary>
            Gets or sets the a friendly name for the target property
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidator.SupportsWebValidation">
            <summary>
            Gets a value indicating whether this validator supports web validation.
            </summary>
            <value>
            <see langword="true"/> if web validation is supported; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
        </member>
        <member name="P:Castle.Components.Validator.AbstractValidator.Name">
            <summary>
            Gets the property name. The <see cref="P:Castle.Components.Validator.AbstractValidator.FriendlyName"/>
            is returned if non-null, otherwise it will return the property name.
            </summary>
        </member>
        <member name="T:Castle.Components.Validator.DateTimeValidator">
            <summary>
            This is a meta validator. 
            It is only useful to test a source content before setting it on the 
            target instance.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.DateTimeValidator.IsValid(System.Object,System.Object)">
            <summary>
            If the <c>fieldValue</c> is not null, an attempt to convert the
            content to a Date is performed, and the field is considered value
            if the conversion is successful.
            </summary>
            <param name="instance">The target type instance</param>
            <param name="fieldValue">The property/field value. It can be null.</param>
            <returns>
            <c>true</c> if the value is accepted (has passed the validation test)
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.DateTimeValidator.ApplyWebValidation(Castle.Components.Validator.WebValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IWebValidationGenerator,System.Collections.IDictionary)">
            <summary>
            Applies the web validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IWebValidationGenerator"/>.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="P:Castle.Components.Validator.DateTimeValidator.SupportsWebValidation">
            <summary>
            Gets a value indicating whether this validator supports web validation.
            </summary>
            <value>
            	<see langword="true"/> if web validation is supported; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.DateTimeValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value></value>
        </member>
        <member name="T:Castle.Components.Validator.DecimalValidator">
            <summary>
            This is a meta validator. 
            It is only useful to test a source content before setting it on the 
            target instance.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.DecimalValidator.IsValid(System.Object,System.Object)">
            <summary>
            If the <c>fieldValue</c> is not null, an attempt to convert the
            content to a Decimal is performed, and the field is considered value
            if the conversion is successful.
            </summary>
            <param name="instance">The target type instance</param>
            <param name="fieldValue">The property/field value. It can be null.</param>
            <returns>
            	<c>true</c> if the value is accepted (has passed the validation test)
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.DecimalValidator.ApplyWebValidation(Castle.Components.Validator.WebValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IWebValidationGenerator,System.Collections.IDictionary)">
            <summary>
            Applies the web validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IWebValidationGenerator"/>.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="P:Castle.Components.Validator.DecimalValidator.SupportsWebValidation">
            <summary>
            Gets a value indicating whether this validator supports web validation.
            </summary>
            <value>
            	<see langword="true"/> if web validation is supported; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.DecimalValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value></value>
        </member>
        <member name="T:Castle.Components.Validator.DoubleValidator">
            <summary>
            This is a meta validator. 
            It is only useful to test a source content before setting it on the 
            target instance.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.DoubleValidator.IsValid(System.Object,System.Object)">
            <summary>
            If the <c>fieldValue</c> is not null, an attempt to convert the
            content to a Double is performed, and the field is considered value
            if the conversion is successful.
            </summary>
            <param name="instance">The target type instance</param>
            <param name="fieldValue">The property/field value. It can be null.</param>
            <returns>
            	<c>true</c> if the value is accepted (has passed the validation test)
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.DoubleValidator.ApplyWebValidation(Castle.Components.Validator.WebValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IWebValidationGenerator,System.Collections.IDictionary)">
            <summary>
            Applies the web validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IWebValidationGenerator"/>.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="P:Castle.Components.Validator.DoubleValidator.SupportsWebValidation">
            <summary>
            Gets a value indicating whether this validator supports web validation.
            </summary>
            <value>
            	<see langword="true"/> if web validation is supported; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.DoubleValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value></value>
        </member>
        <member name="T:Castle.Components.Validator.EmailValidator">
            <summary>
            Validate that this is a valid (formatted) email using regex
            </summary>
        </member>
        <member name="T:Castle.Components.Validator.RegularExpressionValidator">
            <summary>
            Validate a property using regular expression
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.RegularExpressionValidator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.RegularExpressionValidator"/> class.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Castle.Components.Validator.RegularExpressionValidator.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.RegularExpressionValidator"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="options">The regular expression options.</param>
        </member>
        <member name="M:Castle.Components.Validator.RegularExpressionValidator.IsValid(System.Object,System.Object)">
            <summary>
            Validate that the property value match the given regex
            </summary>
            <param name="instance"></param>
            <param name="fieldValue"></param>
            <returns><c>true</c> if the field is OK</returns>
        </member>
        <member name="M:Castle.Components.Validator.RegularExpressionValidator.ApplyWebValidation(Castle.Components.Validator.WebValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IWebValidationGenerator,System.Collections.IDictionary)">
            <summary>
            Applies the web validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IWebValidationGenerator"/>.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="P:Castle.Components.Validator.RegularExpressionValidator.RegexRule">
            <summary>
            Gets the regular expression object.
            </summary>
            <value>The regular expression object.</value>
        </member>
        <member name="P:Castle.Components.Validator.RegularExpressionValidator.Expression">
            <summary>
            Gets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:Castle.Components.Validator.RegularExpressionValidator.SupportsWebValidation">
            <summary>
            Gets a value indicating whether this validator supports web validation.
            </summary>
            <value>
            	<see langword="true"/> if web validation is supported; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="F:Castle.Components.Validator.EmailValidator.emailRule">
            <summary>
            From http://www.codeproject.com/aspnet/Valid_Email_Addresses.asp
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.EmailValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.EmailValidator"/> class.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.EmailValidator.ApplyWebValidation(Castle.Components.Validator.WebValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IWebValidationGenerator,System.Collections.IDictionary)">
            <summary>
            Applies the web validation.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="P:Castle.Components.Validator.EmailValidator.SupportsWebValidation">
            <summary>
            Gets a value indicating whether [supports web validation].
            </summary>
            <value>
            	<c>true</c> if [supports web validation]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.EmailValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value></value>
        </member>
        <member name="T:Castle.Components.Validator.IntegerValidator">
            <summary>
            This is a meta validator. 
            It is only useful to test a source content before setting it on the 
            target instance.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.IntegerValidator.IsValid(System.Object,System.Object)">
            <summary>
            If the <c>fieldValue</c> is not null, an attempt to convert the
            content to a Integer is performed, and the field is considered value
            if the conversion is successful.
            </summary>
            <param name="instance">The target type instance</param>
            <param name="fieldValue">The property/field value. It can be null.</param>
            <returns>
            	<c>true</c> if the value is accepted (has passed the validation test)
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.IntegerValidator.ApplyWebValidation(Castle.Components.Validator.WebValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IWebValidationGenerator,System.Collections.IDictionary)">
            <summary>
            Applies the web validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IWebValidationGenerator"/>.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="P:Castle.Components.Validator.IntegerValidator.SupportsWebValidation">
            <summary>
            Gets a value indicating whether this validator supports web validation.
            </summary>
            <value>
            	<see langword="true"/> if web validation is supported; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.IntegerValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value></value>
        </member>
        <member name="T:Castle.Components.Validator.LengthValidator">
            <summary>
            Ensures that a property's string representation 
            is within the desired length limitations.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.LengthValidator.#ctor(System.Int32)">
            <summary>
            Initializes a new exact length validator.
            </summary>
            <param name="exactLength">The exact length required.</param>
        </member>
        <member name="M:Castle.Components.Validator.LengthValidator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new range based length validator.
            </summary>
            <param name="minLength">The minimum length, or <c>int.MinValue</c> if this should not be tested.</param>
            <param name="maxLength">The maximum length, or <c>int.MaxValue</c> if this should not be tested.</param>
        </member>
        <member name="M:Castle.Components.Validator.LengthValidator.IsValid(System.Object,System.Object)">
            <summary>
            Validate that the property value matches the length requirements.
            </summary>
            <param name="instance"></param>
            <param name="fieldValue"></param>
            <returns><c>true</c> if the field is OK</returns>
        </member>
        <member name="M:Castle.Components.Validator.LengthValidator.ApplyWebValidation(Castle.Components.Validator.WebValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IWebValidationGenerator,System.Collections.IDictionary)">
            <summary>
            Applies the web validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IWebValidationGenerator"/>.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:Castle.Components.Validator.LengthValidator.BuildErrorMessage">
            <summary>
            Builds the error message.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Castle.Components.Validator.LengthValidator.ExactLength">
            <summary>
            Gets or sets the exact length to validate.
            </summary>
            <value>The exact length to validate.</value>
        </member>
        <member name="P:Castle.Components.Validator.LengthValidator.MinLength">
            <summary>
            Gets or sets the minimun length to validate.
            </summary>
            <value>The minimun length to validate.</value>
        </member>
        <member name="P:Castle.Components.Validator.LengthValidator.MaxLength">
            <summary>
            Gets or sets the maximum length to validate.
            </summary>
            <value>The maximum length to validate.</value>
        </member>
        <member name="P:Castle.Components.Validator.LengthValidator.SupportsWebValidation">
            <summary>
            Gets a value indicating whether this validator supports web validation.
            </summary>
            <value>
            	<see langword="true"/> if web validation is supported; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:Castle.Components.Validator.NonEmptyValidator">
            <summary>
            Ensures that a property was 
            filled with some value
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.NonEmptyValidator.IsValid(System.Object,System.Object)">
            <summary>
            Check that this property has a value that is not null or empty (if string)
            </summary>
            <param name="instance"></param>
            <param name="fieldValue"></param>
            <returns><c>true</c> if the field is OK</returns>
        </member>
        <member name="M:Castle.Components.Validator.NonEmptyValidator.ApplyWebValidation(Castle.Components.Validator.WebValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IWebValidationGenerator,System.Collections.IDictionary)">
            <summary>
            Applies the web validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IWebValidationGenerator"/>.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="P:Castle.Components.Validator.NonEmptyValidator.SupportsWebValidation">
            <summary>
            Gets a value indicating whether this validator supports web validation.
            </summary>
            <value>
            	<see langword="true"/> if web validation is supported; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.NonEmptyValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value></value>
        </member>
        <member name="T:Castle.Components.Validator.RunWhen">
            <summary>
            Represents "phases" in which you can group 
            different validations and run then accordingly
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.RunWhen.Everytime">
            <summary>
            Run all validations
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.RunWhen.Insert">
            <summary>
            Only during an insertion phase
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.RunWhen.Update">
            <summary>
            Only during an update phase
            </summary>
        </member>
        <member name="F:Castle.Components.Validator.RunWhen.Custom">
            <summary>
            Defines a custom phase
            </summary>
        </member>
        <member name="T:Castle.Components.Validator.ValidateNonEmptyAttribute">
            <summary>
            Validate that the property is not null or empty (for strings)
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateNonEmptyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateNonEmptyAttribute"/> class.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.ValidateNonEmptyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.ValidateNonEmptyAttribute"/> class.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Castle.Components.Validator.ValidateNonEmptyAttribute.Build">
            <summary>
            Constructs and configures an <see cref="T:Castle.Components.Validator.IValidator"/>
            instance based on the properties set on the attribute instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Castle.Components.Validator.SameAsValidator">
            <summary>
            Validates that the content has the same 
            value as the property informed.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.SameAsValidator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Components.Validator.SameAsValidator"/> class.
            </summary>
            <param name="propertyToCompare">The property to compare.</param>
        </member>
        <member name="M:Castle.Components.Validator.SameAsValidator.IsValid(System.Object,System.Object)">
            <summary>
            Validates that the <c>fieldValue</c>
            is the same as the property set through the constructor.
            </summary>
            <param name="instance">The target type instance</param>
            <param name="fieldValue">The property/field value. It can be null.</param>
            <returns>
            	<c>true</c> if the value is accepted (has passed the validation test)
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.SameAsValidator.ApplyWebValidation(Castle.Components.Validator.WebValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IWebValidationGenerator,System.Collections.IDictionary)">
            <summary>
            Applies the web validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IWebValidationGenerator"/>.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="P:Castle.Components.Validator.SameAsValidator.PropertyToCompare">
            <summary>
            Gets the property to compare.
            </summary>
            <value>The property to compare.</value>
        </member>
        <member name="P:Castle.Components.Validator.SameAsValidator.SupportsWebValidation">
            <summary>
            Gets a value indicating whether this validator supports web validation.
            </summary>
            <value>
            	<see langword="true"/> if web validation is supported; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.SameAsValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value></value>
        </member>
        <member name="T:Castle.Components.Validator.SingleValidator">
            <summary>
            This is a meta validator. 
            It is only useful to test a source content before setting it on the 
            target instance.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.SingleValidator.IsValid(System.Object,System.Object)">
            <summary>
            If the <c>fieldValue</c> is not null, an attempt to convert the
            content to a Single is performed, and the field is considered value
            if the conversion is successful.
            </summary>
            <param name="instance">The target type instance</param>
            <param name="fieldValue">The property/field value. It can be null.</param>
            <returns>
            	<c>true</c> if the value is accepted (has passed the validation test)
            </returns>
        </member>
        <member name="M:Castle.Components.Validator.SingleValidator.ApplyWebValidation(Castle.Components.Validator.WebValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IWebValidationGenerator,System.Collections.IDictionary)">
            <summary>
            Applies the web validation by setting up one or
            more input rules on <see cref="T:Castle.Components.Validator.IWebValidationGenerator"/>.
            </summary>
            <param name="config">The config.</param>
            <param name="inputType">Type of the input.</param>
            <param name="generator">The generator.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="P:Castle.Components.Validator.SingleValidator.SupportsWebValidation">
            <summary>
            Gets a value indicating whether this validator supports web validation.
            </summary>
            <value>
            	<see langword="true"/> if web validation is supported; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Castle.Components.Validator.SingleValidator.MessageKey">
            <summary>
            Returns the key used to internationalize error messages
            </summary>
            <value></value>
        </member>
        <member name="T:Castle.Components.Validator.WebValidationConfiguration">
            <summary>
            Represents the base of a web configuration.
            </summary>
        </member>
        <member name="M:Castle.Components.Validator.WebValidationConfiguration.Configure(System.Collections.IDictionary)">
            <summary>
            Configures the JS library based on the supplied parameters.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Castle.Components.Validator.WebValidationConfiguration.CreateAfterFormOpened(System.String)">
            <summary>
            Implementors should return any tag/js content
            to be rendered after the form tag is rendered.
            </summary>
            <param name="formId">The form id.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Components.Validator.WebValidationConfiguration.CreateBeforeFormClosed(System.String)">
            <summary>
            Implementors should return any tag/js content
            to be rendered after the form tag is closed.
            </summary>
            <param name="formId">The form id.</param>
            <returns></returns>
        </member>
    </members>
</doc>
